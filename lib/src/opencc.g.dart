// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Auto-generated, internal bindings to opencc
class Bindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Bindings(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Bindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> convert(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> configFile,
  ) {
    return _convert(
      text,
      configFile,
    );
  }

  late final _convertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('convert');
  late final _convert = _convertPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> convertList(
    ffi.Pointer<ffi.Pointer<ffi.Char>> list,
    int size,
    ffi.Pointer<ffi.Char> configFile,
  ) {
    return _convertList(
      list,
      size,
      configFile,
    );
  }

  late final _convertListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('convertList');
  late final _convertList = _convertListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int, ffi.Pointer<ffi.Char>)>();

  void free_string(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _free_string(
      str,
    );
  }

  late final _free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'free_string');
  late final _free_string =
      _free_stringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void free_string_array(
    ffi.Pointer<ffi.Pointer<ffi.Char>> array,
    int size,
  ) {
    return _free_string_array(
      array,
      size,
    );
  }

  late final _free_string_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('free_string_array');
  late final _free_string_array = _free_string_arrayPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();
}
